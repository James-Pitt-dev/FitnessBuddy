<% layout('layouts/boilerplate') %>
<!-- https://getbootstrap.com/docs/5.3/components/modal/#how-it-works -->

<div class="row">

  <h1 class="text-center">Create a New Workout</h1>
  
  <div class="col-md-6 offset-md-3" >
   
  
    <form action="/workouts/new" method="POST" novalidate class="validated-form">

      <div class="mb-3 text-center">
        <!--- <input class="form-control" type="number" id="timer" name="workout[timer]" placeholder="60"> 
           <div class="valid-feedback">Looks Good!</div>--->
        
           <div class=""  >Timer: 
            <span class=" stopwatch display-7" type="string" id="time">00:00:00</span>
           <i class="fas fa-redo-alt fa-2x mt-2" id="resetButton" style="cursor: pointer;"></i>
           <i class="fas fa-play fa-2x " id="startButton" style="cursor: pointer;"></i>
          </div>
           <!-- <button class="btn btn-warning btn-lg" id="resetButton">Reset</button> -->
       </div>

      
      <div class="mb-3">
        <input class="form-control" type="text" id="title" name="workout[title]" placeholder="Name your workout" required>
        <div class="valid-feedback">Looks Good!</div>
      </div>
      <div class="mb-3">
        <textarea class="form-control" id="notes" name="workout[notes]" placeholder="Add notes to help your workout"></textarea>
        <div class="valid-feedback">Looks Good!</div>
      </div>
      

      <div id="exercises-container"></div>

      <div class="mb-3 mt-4 d-grid col-md-5">
        <button type="button" class="btn btn-primary btn-lg" id="add-exercise">Add Exercise</button>
      </div>
      <div class="row row-cols-lg-2">
      <div class="mb-3 d-grid col-md-6">
        <button class="btn btn-success btn-lg" id="finishButton" >Finish Workout</button>
      </div>

      <div class="mb-3 d-grid col-md-6">
        <button type="button" class="btn btn-outline-danger btn-lg" onclick="window.location='/workouts/index'">Cancel</button>
        
        <input type="hidden" name="workout[elapsedTime]" id="elapsedTime" value="00:00:00">
      </div>
    </div>
    </form>

  </div>
</div>



<!-- Modal for exercise selection -->
<div class="modal fade" id="exerciseModal" tabindex="-1" aria-labelledby="exerciseModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="exerciseModalLabel">Select Exercise</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <input type="text" id="exercise-search" class="form-control mb-3" placeholder="Search exercises...">
        <div class="list-group" id="exercise-list">
          <% for(let exercise of exercises) { %>
            <button type="button" class="list-group-item list-group-item-action" data-id="<%= exercise._id %>" data-name="<%= exercise.name %>"><%= exercise.name %></button>
          <% } %>
        </div>
      </div>
    </div>
  </div>
</div>


<!-- Modal for Congratulations Message -->
<div class="modal fade" id="congratulationsModal" tabindex="-1" aria-labelledby="congratulationsModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="congratulationsModalLabel">Congratulations!</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <p>You've completed your workout!</p>
        <div id="workoutDetails"></div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-primary" id="confirmButton">Confirm</button>
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function () {
      const urlParams = new URLSearchParams(window.location.search);
      const templateId = urlParams.get('template');

      if (templateId) {
          fetch(`/workouts/template/${templateId}`)
              .then(response => response.json())
              .then(data => {
                  // Pre-fill the form with the details of the old workout
                  document.getElementById('title').value = data.title;
                  document.getElementById('notes').value = data.notes;

                  const exercisesContainer = document.getElementById('exercises-container');
                  exercisesContainer.innerHTML = '';

                  data.exercises.forEach((workoutExercise, exerciseIndex) => {
                      const exerciseDiv = document.createElement('div');
                      exerciseDiv.className = 'exercise mb-3';

                      let setsHtml = '';
                      workoutExercise.sets.forEach((set, setIndex) => {
                          setsHtml += `
                            <div class="row row-cols-md-3 mt-5 set">
                              ${setIndex + 1}
                              <div class="col">
                                <label for="sets">Reps</label>
                                <input class="form-control" type="number" name="workout[exercises][${exerciseIndex}][sets][${setIndex}][reps]" value="${set.reps}" placeholder="0">
                              </div>
                              <div class="col">
                                <label for="weight">Weight</label>
                                <input class="form-control" type="number" name="workout[exercises][${exerciseIndex}][sets][${setIndex}][weight]" value="${set.weight}" placeholder="0">
                              </div>
                                
                        ${setIndex === 0 ? `
                <div class="col-md-3">
                  <label for="previousWeight">Previous</label>
                  <input class="form-control" type="string" name="workout[exercises][${exerciseIndex}][sets][${setIndex}][previousWeight]" ">
                </div>` : ''}
                    ${setIndex !== 0 ? `
                              <div class="col-md-2">
                                <button type="button" class="btn btn-outline-danger mt-3 delete-set-button btn-sm" aria-label="Close">&times;</button>
                              </div>` : ''}
                          </div>
                          `;
                      });

                      exerciseDiv.innerHTML = `
                        <div class="container">
                            <div class="row row-cols-mb-3  bg-light bg-gradient">
                             <div class="col"><h4>${workoutExercise.exercise.name}</h4></div>
                             <div class="col"></div>
                              <div class="col"><button type="button" class="btn btn-outline-danger btn-sm mt-3 delete-exercise-button" aria-label="Close">&times;</button></div>
                            
                          </div>
                          <input type="hidden" name="workout[exercises][${exerciseIndex}][exercise]" value="${workoutExercise.exercise._id}">
                          <div class="sets-container">
                            ${setsHtml}
                          </div>
                          <button type="button" class="btn btn-secondary mt-2 add-set" data-index="${exerciseIndex}">+ Add Set</button>
                          <hr>
                        </div>
                      `;

                      exercisesContainer.appendChild(exerciseDiv);
                                    // Fetch previous weight for the first set
                  fetch(`/workouts/previousWeight/${workoutExercise.exercise._id}`)
                    .then(response => response.json())
                    .then(data => {
                        exerciseDiv.querySelector(`input[name="workout[exercises][${exerciseIndex}][sets][0][previousWeight]"]`).value = ` ${data.previousReps} X ${data.previousWeight}`;
                    });

                      exerciseDiv.querySelector('.delete-exercise-button').addEventListener('click', function () {
                          exerciseDiv.remove();
                          reindexExercises();
                      });

                      exerciseDiv.querySelectorAll('.delete-set-button').forEach(button => {
                          button.addEventListener('click', function () {
                              button.closest('.set').remove();
                              reindexSets(exerciseIndex);
                          });
                      });

                      document.querySelector(`.add-set[data-index="${exerciseIndex}"]`).addEventListener('click', function () {
                          addSetToExercise(exerciseIndex);
                      });
                  });
              })
              .catch(error => {
                  console.error('Error fetching template workout:', error);
              });
      }
  });

  document.getElementById('add-exercise').addEventListener('click', function () {
    const exerciseModal = new bootstrap.Modal(document.getElementById('exerciseModal'));
    exerciseModal.show();
  });

  document.getElementById('exercise-list').addEventListener('click', function (event) {
    if (event.target && event.target.nodeName == "BUTTON") {
      const exerciseId = event.target.getAttribute('data-id');
      const exerciseName = event.target.getAttribute('data-name');
      addExerciseToForm(exerciseId, exerciseName);
      const exerciseModal = bootstrap.Modal.getInstance(document.getElementById('exerciseModal'));
      exerciseModal.hide();
    }
  });

  document.getElementById('exercise-search').addEventListener('input', function () {
    const query = this.value.toLowerCase();
    const exercises = document.querySelectorAll('#exercise-list button');

    exercises.forEach(exercise => {
      const name = exercise.getAttribute('data-name').toLowerCase();
      if (name.includes(query)) {
        exercise.style.display = 'block';
      } else {
        exercise.style.display = 'none';
      }
    });
  });

  function addExerciseToForm(exerciseId, exerciseName) {
    const container = document.getElementById('exercises-container');
    const exerciseDiv = document.createElement('div');
    exerciseDiv.className = 'exercise mb-3';
    const exerciseIndex = document.querySelectorAll('.exercise').length;


    exerciseDiv.innerHTML = `
    <div class="container">
        <div class="row row-cols-mb-3  bg-light bg-gradient">
          <div class="col"><h4>${exerciseName}</h4></div>
          <div class="col"></div>
          <div class="col"><button type="button" class="btn btn-outline-danger btn-sm mt-3 delete-exercise-button" aria-label="Close">&times;</button></div>
        </div>
      
      <input type="hidden" name="workout[exercises][${exerciseIndex}][exercise]" value="${exerciseId}">
      <div class="sets-container">
        <div class="row row-cols-mb-3  mt-5 set">
          1
          <div class="col ">
            <label for="sets">Reps</label>
            <input class="form-control" type="number" name="workout[exercises][${exerciseIndex}][sets][0][reps]" placeholder="0">
          </div>
          <div class="col ">
            <label for="weight">Weight</label>
            <input class="form-control" type="number" name="workout[exercises][${exerciseIndex}][sets][0][weight]" placeholder="0">
          </div>
          <div class="col">
            <label for="previousWeight">Previous</label>
            <input class="form-control" type="string" name="workout[exercises][${exerciseIndex}][sets][0][previousWeight]" >
          </div>
        </div>
      </div>
      
      <button type="button" class="btn btn-secondary mt-2 add-set" data-index="${exerciseIndex}">+ Add Set</button>
      <hr>
      </div>
    `;

    container.appendChild(exerciseDiv);
   

    // Fetch previous weight for the first set
    fetch(`/workouts/previousWeight/${exerciseId}`)
        .then(response => response.json())
        .then(data => {
            exerciseDiv.querySelector(`input[name="workout[exercises][${exerciseIndex}][sets][0][previousWeight]"]`).value = `${data.previousWeight} X ${data.previousReps}` ;
        });


    exerciseDiv.querySelector('.delete-exercise-button').addEventListener('click', function () {
      exerciseDiv.remove();
      reindexExercises();
    });

    document.querySelector(`.add-set[data-index="${exerciseIndex}"]`).addEventListener('click', function () {
      addSetToExercise(exerciseIndex);
    });
  }

  function addSetToExercise(exerciseIndex) {
    const setsContainer = document.querySelector(`.exercise:nth-child(${exerciseIndex + 1}) .sets-container`);
   
    const setCount = setsContainer.querySelectorAll('.set').length;
    console.log(setCount);
    const lastSet = setsContainer.querySelectorAll('.set')[setCount - 1];
    const lastWeight = lastSet ? lastSet.querySelector('input[name*="[weight]"]').value : 0;
    const lastRep = lastSet ? lastSet.querySelector('input[name*="[reps]"]').value : 0;


    const setDiv = document.createElement('div');
    setDiv.className = 'row row-cols-mb-3  mt-2 set';

    setDiv.innerHTML = `
      ${setCount + 1}
      <div class="col">
        <label for="sets">Reps</label>
        <input class="form-control" type="number" name="workout[exercises][${exerciseIndex}][sets][${setCount}][reps]" placeholder="${lastRep}">
      </div>
      <div class="col">
        <label for="weight">Weight</label>
        <input class="form-control" type="number" name="workout[exercises][${exerciseIndex}][sets][${setCount}][weight]" placeholder="${lastWeight}">
      </div>
      

      <div class="col">
        <button type="button" class="btn btn-outline-danger mt-2 btn-sm delete-set-button  " aria-label="Close">&times;</button>
      </div>
    `;

    setsContainer.appendChild(setDiv);

    // Add event listener to the "X" button to remove the set div and re-index sets
    setDiv.querySelector('.delete-set-button').addEventListener('click', function () {
      setDiv.remove();
      reindexSets(exerciseIndex);
    });
  }

  function reindexSets(exerciseIndex) {
    const setsContainer = document.querySelector(`.exercise:nth-child(${exerciseIndex + 1}) .sets-container`);
    const sets = setsContainer.querySelectorAll('.set');

    sets.forEach((setDiv, index) => {
      const repsInput = setDiv.querySelector('input[name*="[reps]"]');
      const weightInput = setDiv.querySelector('input[name*="[weight]"]');
      const previousWeightInput = setDiv.querySelector('input[name*="[previousWeight]"]');

      repsInput.name = `workout[exercises][${exerciseIndex}][sets][${index}][reps]`;
      weightInput.name = `workout[exercises][${exerciseIndex}][sets][${index}][weight]`;
      previousWeightInput.name = `workout[exercises][${exerciseIndex}][sets][${index}][previousWeight]`;
    });
  }

  function reindexExercises() {
    const exercisesContainer = document.getElementById('exercises-container');
    const exercises = exercisesContainer.querySelectorAll('.exercise');

    exercises.forEach((exerciseDiv, exerciseIndex) => {
      const exerciseIdInput = exerciseDiv.querySelector('input[name*="[exercise]"]');
      exerciseIdInput.name = `workout[exercises][${exerciseIndex}][exercise]`;

      const addSetButton = exerciseDiv.querySelector('.add-set');
      addSetButton.dataset.index = exerciseIndex;
      addSetButton.removeEventListener('click', addSetToExercise); // Remove the old event listener
      addSetButton.addEventListener('click', function () {
        addSetToExercise(exerciseIndex);
      });

      const setsContainer = exerciseDiv.querySelector('.sets-container');
      const sets = setsContainer.querySelectorAll('.set');

      sets.forEach((setDiv, setIndex) => {
        const repsInput = setDiv.querySelector('input[name*="[reps]"]');
        const weightInput = setDiv.querySelector('input[name*="[weight]"]');
        const previousWeightInput = setDiv.querySelector('input[name*="[previousWeight]"]');

        repsInput.name = `workout[exercises][${exerciseIndex}][sets][${setIndex}][reps]`;
        weightInput.name = `workout[exercises][${exerciseIndex}][sets][${setIndex}][weight]`;
        previousWeightInput.name = `workout[exercises][${exerciseIndex}][sets][${setIndex}][previousWeight]`;
      });
    });
  }

  
  let timer;
  let elapsedTime = 0;
  let isRunning = false;
  let formattedTime = '00:00:00';

  function formatTime(ms) {
      let totalSeconds = Math.floor(ms / 1000);
      let hours = Math.floor(totalSeconds / 3600);
      let minutes = Math.floor((totalSeconds % 3600) / 60);
      let seconds = totalSeconds % 60;

      return ` ${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;
  }

  function startStopwatch() {
      if (!isRunning) {
          isRunning = true;
          const startTime = Date.now() - elapsedTime;
          timer = setInterval(() => {
              elapsedTime = Date.now() - startTime;
              formattedTime = formatTime(elapsedTime);
              document.getElementById('time').textContent = formattedTime;
          }, 1000);
      }
  }

  function stopStopwatch() {
      if (isRunning) {
          isRunning = false;
          clearInterval(timer);
      }
  }

  function resetStopwatch() {
      stopStopwatch();
      elapsedTime = 0;
      formattedTime =  '00:00:00';
      document.getElementById('time').textContent = formattedTime;
  }

  document.getElementById('startButton').addEventListener('click', function () {
      startStopwatch();
  });
  document.getElementById('resetButton').addEventListener('click', resetStopwatch);

  document.getElementById('finishButton').addEventListener('click', function (event) {
    event.preventDefault(); // Prevent the default form submission

    stopStopwatch();
    document.getElementById('elapsedTime').value = formattedTime; // Set the hidden input value to the formatted time

    // Collect workout details
    const title = document.getElementById('title').value;
    const notes = document.getElementById('notes').value;
    const exercisesContainer = document.getElementById('exercises-container');
    const exercises = exercisesContainer.querySelectorAll('.exercise');

    let workoutDetailsHtml = `
        <p><strong>Title:</strong> ${title}</p>
        <p><strong>Notes:</strong> ${notes}</p>
        <p><strong>Elapsed Time:</strong> ${formattedTime}</p>
        <div><strong>Exercises:</strong>
            <ul>`;
    
    exercises.forEach((exerciseDiv, exerciseIndex) => {
        const exerciseName = exerciseDiv.querySelector('h4').textContent;
        workoutDetailsHtml += `<li>${exerciseName}
            <ul>`;
        
        const sets = exerciseDiv.querySelectorAll('.set');
        sets.forEach((setDiv, setIndex) => {
            const reps = setDiv.querySelector('input[name*="[reps]"]').value;
            const weight = setDiv.querySelector('input[name*="[weight]"]').value;
            workoutDetailsHtml += `<li>Set ${setIndex + 1}: ${reps} reps, ${weight} lbs</li>`;
        });
        
        workoutDetailsHtml += `</ul>
        </li>`;
    });

    workoutDetailsHtml += `</ul></div>`;
    
    document.getElementById('workoutDetails').innerHTML = workoutDetailsHtml;

    // Show the congratulations modal
    const congratulationsModal = new bootstrap.Modal(document.getElementById('congratulationsModal'));
    congratulationsModal.show();

    // Handle confirmation button click
    document.getElementById('confirmButton').addEventListener('click', function () {
        document.querySelector('form').submit(); // Submits the form when the modal is confirmed
    });
});
</script>
